def successors(state):
    i = state.index(0)
    if i % 3 == 0:
        return [(state[:i] + (state[i+1], 0) + state[i+2:], 1)]
    elif i % 3 == 2:
        return [(state[:i-1] + (state[i], 0) + state[i+1:], 1)]
    else:
        return [(state[:i] + (state[i+1], 0) + state[i+2:], 1),
                (state[:i-1] + (state[i], 0) + state[i+1:], 1)]

def manhattan_distance(state, goal_state):
    d = 0
    for i in range(9):
        x1, y1 = i // 3, i % 3
        x2, y2 = goal_state.index(state[i]) // 3, goal_state.index(state[i]) % 3
        d += abs(x1 - x2) + abs(y1 - y2)
    return d

start_state = (1, 2, 3, 4, 0, 5, 6, 7, 8)
goal_state = (1, 2, 3, 4, 5, 8, 6, 0, 7)

path = astar(start_state, goal_state, successors, manhattan_distance)
print(path)
